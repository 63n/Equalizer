#line 2 "lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
static yyconst short int yy_accept[685] =
    {   0,
        0,    0,   93,   92,   90,   89,   92,   91,   92,   92,
       92,   92,   85,   92,   92,   92,   92,   92,   92,   92,
       88,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
        0,   87,    0,   85,   86,   84,   91,   83,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,    0,
        0,   62,    0,    0,    0,    0,    0,    0,   38,   45,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   49,    0,   23,    0,
       24,    0,   41,    0,    0,    0,    0,    0,   55,    0,

        0,    0,   50,    0,   72,    0,    0,   59,   66,    0,
       67,    0,    0,    0,    0,   63,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,    0,    0,   21,    0,    0,    0,    0,    1,    0,
        0,    0,    0,    0,    0,   40,    0,    0,   71,   20,
        0,    0,    0,    0,    0,   25,    0,    0,    0,    0,
        0,    0,    0,    0,   22,    0,    0,   46,   53,    0,

        0,   70,   57,   39,    0,    0,    0,    0,    0,    0,
       76,    0,    0,    0,    0,   54,    0,    0,   64,    0,
        0,    0,    0,    0,   65,   42,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   75,   68,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,   48,
        0,    0,    0,    0,    0,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   73,

        0,    0,    0,    0,    0,   27,   78,    0,    0,    0,
        0,    0,   80,   77,    0,    0,    0,    0,    0,   74,
        0,    0,    0,    0,   33,   32,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,   30,    0,   29,
       31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
        0,    0,   13,   12,   14,    0,    0,    0,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,    0,    0,    0,   15,    0,    0,    0,    0,   11,
        0,   10,   16,    0,    0,    0,    0,    0,    0,    0,
        9,    0,    6,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,   19,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    1,    1,    1,
        1,    1,    8,    1,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    7,    1,    7,
        1,    7,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,    7,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,    7,   33,    7,   34,    7,
       35,    1,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,    7,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,    7,
       59,    7,   35,    1,   35,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[60] =
    {   0,
        1,    1,    1,    2,    2,    1,    2,    1,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[686] =
    {   0,
        0,    0,  714,  715,  715,  715,  708,  715,   50,   51,
      700,  700,   54,  680,   42,   50,  681,  691,   52,  692,
      715,   26,   24,   28,  661,  646,  667,   36,   40,  654,
      665,   47,   44,   49,  645,   50,   60,   66,  655,   61,
      694,  715,  686,   92,   97,  685,  715,  684,  665,  677,
      670,  677,  664,  677,  653,  670,  674,  667,  658,  647,
      632,  627,  626,  624,  624,  636,  640,   64,  622,  634,
      620,  623,  631,  622,  616,  618,  613,  619,  627,  625,
      622,  715,  608,  611,  624,  623,  610,  618,  604,  603,
      614,  617,  599,  601,  603,  599,  598,  607,  600,  597,

      633,  627,  630,  616,  618,  609,  606,   55,  607,  621,
      616,  614,  591,  608,  579,  581,  589,  574,  586,  578,
       66,   77,  575,  611,  569,  585,  581,  566,  565,  563,
      577,  576,  575,  574,  715,  563,  572,  563,  571,  567,
      715,  568,  551,  554,  555,  559,  559,  562,  566,  560,
      542,  552,  558,  573,  567,  566,  568,  573,  715,  101,
      571,  715,  577,  559,  562,  541,  537,  541,  715,  715,
      535,  543,  534,  545,  531,  535,  538,  531,  540,  535,
      538,  525,  537,  523,  516,  521,  715,  515,  715,  512,
      715,  526,  715,  525,  524,  523,  522,  524,  715,  510,

      510,  512,  715,  507,  715,  507,  542,  715,  715,  528,
      715,  541,   98,  528,  539,  715,  715,  492,  510,  511,
      500,  494,  505,  496,  488,  500,  503,  504,  486,  485,
      491,  715,   88,  500,  494,  496,  479,  478,  478,  715,
      482,  477,  479,  491,  471,  485,  475,  466,  500,  715,
      497,  494,  106,  504,  504,  467,  476,  460,  479,  715,
      467,  473,  463,  715,  456,  451,  468,  453,  715,   79,
      451,  451,  457,  451,  444,  715,  460,  465,  715,  715,
      464,  446,  443,  455,  443,  715,  478,  469,  467,  471,
      474,  464,  467,  444,  715,  432,   85,  715,  715,  446,

      440,  715,  715,  715,  445,  427,  435,   96,  440,  443,
      715,  426,  104,   97,  425,  715,  422,  421,  715,  458,
      442,  454,  457,  438,  715,  715,  429,  428,  423,  715,
      417,  416,  427,  417,  408,  409,  715,  413,  423,  412,
      408,  416,  401,  406,  404,  408,  715,  715,  429,  426,
      414,  418,  412,  393,  404,  402,  395,  390,  395,  387,
      395,  398,  397,  389,  385,  388,  383,  392,  395,  391,
      389,  393,  412,  409,  405,  404,  715,  369,  379,  715,
      385,  380,  381,  365,  368,  715,  376,  372,  365,  359,
      364,  369,  370,  357,  388,  372,  394,  380,  392,  715,

      349,  348,  364,  348,  345,  715,  715,  362,  345,  353,
      357,  348,  715,  715,  381,  372,  361,  366,  359,  715,
      344,  332,  346,  341,  715,  715,  715,  340,  325,  352,
      369,  350,  344,  348,  328,  335,  335,  336,  327,  322,
      341,  340,  341,  118,  340,  319,  325,  317,  311,  715,
      320,  334,  331,  325,  347,  346,  322,  715,  316,  715,
      715,  320,  319,  325,  336,  321,  320,  120,  297,   99,
      329,  312,  313,  315,  314,  323,  320,  715,  301,  296,
      319,  309,  321,  308,  307,  310,  321,  291,  289,  306,
      299,  293,  292,  291,  295,  300,  269,  279,  291,  304,

      306,  126,  130,  283,  301,  281,  261,  279,  285,  300,
      299,  120,  285,  297,  143,  279,  260,  271,  276,  288,
      274,  271,  275,  274,  270,  267,  134,  266,  266,  260,
      258,  246,  262,  266,  274,  265,  268,  271,  256,  261,
      270,  252,  260,  265,  149,  227,  243,  266,  242,  715,
      262,  249,  715,  250,  259,  247,  258,  248,  241,  246,
      242,  250,  235,  219,  210,  232,  142,  242,  225,  247,
      239,  229,  234,  226,  238,  227,  230,  225,  234,  715,
      204,  228,  223,  221,  210,  218,  220,  207,  229,  224,
      225,  213,  218,  211,  205,  210,  715,  204,  220,  216,

      200,  204,  212,  213,  196,  212,  196,  715,  211,  194,
      202,  206,  189,  200,  201,  196,  187,  715,   69,   87,
       78,  119,  715,  715,  715,  135,  142,  144,  715,  144,
      138,  146,  145,  154,  157,  152,  161,  143,  161,  715,
      156,  156,  164,  158,  715,  154,  158,  160,  174,  715,
      171,  715,  715,  169,  158,  166,  163,  157,  163,  179,
      715,  173,  715,  715,  180,  177,  181,  181,  170,  183,
      168,  174,  182,  171,  195,  185,  180,  198,  190,  183,
      715,  192,  715,  715,  213
    } ;

static yyconst short int yy_def[686] =
    {   0,
      684,    1,  684,  684,  684,  684,  685,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      685,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,    0,  684
    } ;

static yyconst short int yy_nxt[775] =
    {   0,
        4,    5,    6,    5,    7,    8,    4,    9,   10,   11,
       12,   13,   14,    4,   15,   16,   17,    4,    4,    4,
        4,    4,   18,    4,    4,    4,    4,    4,   19,    4,
       20,    4,    4,    4,   21,    4,   22,   23,   24,   25,
       26,   27,   28,   29,   30,    4,   31,    4,   32,   33,
       34,   35,   36,   37,   38,    4,   39,   40,    4,   43,
       43,   44,   45,   48,   50,   44,   53,   51,   57,  160,
       64,   67,   58,   65,   60,   52,   61,   68,   54,   66,
       62,   63,   72,   78,   74,   81,   87,  161,   73,   75,
       88,   79,   82,   84,  632,   85,   80,   99,   89,   83,

       90,   48,   93,   44,   94,  100,   48,  633,   45,  634,
       95,  121,  122,  174,   91,   96,  175,   92,  176,  305,
      212,  252,  253,  290,   97,  177,  213,  270,  306,  271,
      291,  328,  335,  344,  523,  635,  336,  329,  455,  476,
      340,  272,  341,  342,  345,  479,  477,  456,  511,  513,
      541,  480,  514,  524,  583,  636,  512,  343,  527,  542,
      528,  560,  637,  561,  562,  584,  638,  639,  640,  641,
      642,  643,  529,  644,  645,  646,  647,  648,  563,  649,
      650,  651,  652,  653,  654,  655,  656,  657,  658,  659,
      660,  661,  662,  663,  664,  665,  667,  668,  669,  670,

      671,  666,  672,  673,  674,  675,  676,  677,  678,  679,
      680,  681,  682,  683,   41,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  540,  539,

      538,  537,  536,  535,  534,  533,  532,  531,  530,  526,
      525,  522,  521,  520,  519,  518,  517,  516,  515,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  478,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  339,  338,
      337,  334,  333,  332,  331,  330,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,

      313,  312,  311,  310,  309,  308,  307,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  274,  273,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  251,  250,  249,  248,  247,  246,  245,
      217,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  211,  210,  209,  208,  207,  206,  205,  204,

      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  159,  158,
      157,  156,  155,  154,  101,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  125,  124,  123,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  111,  110,  109,  108,  107,
      106,  105,  104,  103,  102,  101,   46,   46,   42,   98,

       86,   77,   76,   71,   70,   69,   59,   56,   55,   49,
       47,   46,   42,  684,    3,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684
    } ;

static yyconst short int yy_chk[775] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
       10,    9,   10,   13,   15,   13,   16,   15,   19,  108,
       23,   24,   19,   23,   22,   15,   22,   24,   16,   23,
       22,   22,   28,   32,   29,   33,   36,  108,   28,   29,
       36,   32,   33,   34,  619,   34,   32,   40,   37,   33,

       37,   44,   38,   44,   38,   40,   45,  620,   45,  621,
       38,   68,   68,  121,   37,   38,  121,   37,  122,  270,
      160,  213,  213,  253,   38,  122,  160,  233,  270,  233,
      253,  297,  308,  314,  512,  622,  308,  297,  444,  468,
      313,  233,  313,  313,  314,  470,  468,  444,  502,  503,
      527,  470,  503,  512,  567,  626,  502,  313,  515,  527,
      515,  545,  627,  545,  545,  567,  628,  630,  631,  632,
      633,  634,  515,  635,  636,  637,  638,  639,  545,  641,
      642,  643,  644,  646,  647,  648,  649,  651,  654,  655,
      656,  657,  658,  659,  660,  662,  665,  666,  667,  668,

      669,  662,  670,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  680,  682,  685,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  552,  551,  549,  548,  547,
      546,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  526,  525,

      524,  523,  522,  521,  520,  519,  518,  517,  516,  514,
      513,  511,  510,  509,  508,  507,  506,  505,  504,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  477,  476,  475,  474,  473,  472,  471,  469,
      467,  466,  465,  464,  463,  462,  459,  457,  456,  455,
      454,  453,  452,  451,  449,  448,  447,  446,  445,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  424,  423,  422,  421,  419,
      418,  417,  416,  415,  412,  411,  410,  409,  408,  405,

      404,  403,  402,  401,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  385,  384,  383,
      382,  381,  379,  378,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  336,  335,  334,  333,  332,  331,  329,  328,  327,
      324,  323,  322,  321,  320,  318,  317,  315,  312,  310,
      309,  307,  306,  305,  301,  300,  296,  294,  293,  292,
      291,  290,  289,  288,  287,  285,  284,  283,  282,  281,

      278,  277,  275,  274,  273,  272,  271,  268,  267,  266,
      265,  263,  262,  261,  259,  258,  257,  256,  255,  254,
      252,  251,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  239,  238,  237,  236,  235,  234,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  215,  214,  212,  210,  207,  206,  204,  202,  201,
      200,  198,  197,  196,  195,  194,  192,  190,  188,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  168,  167,  166,  165,  164,
      163,  161,  158,  157,  156,  155,  154,  153,  152,  151,

      150,  149,  148,  147,  146,  145,  144,  143,  142,  140,
      139,  138,  137,  136,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  125,  124,  123,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  111,  110,  109,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,
       85,   84,   83,   81,   80,   79,   78,   77,   76,   75,
       74,   73,   72,   71,   70,   69,   67,   66,   65,   64,
       63,   62,   61,   60,   59,   58,   57,   56,   55,   54,
       53,   52,   51,   50,   49,   48,   46,   43,   41,   39,

       35,   31,   30,   27,   26,   25,   20,   18,   17,   14,
       12,   11,    7,    3,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "loader.l"
#define INITIAL 0
#line 3 "loader.l"
/* Copyright (c) 2006-2007, Stefan Eilemann <eile@equalizergraphics.com> 
   All rights reserved. */

#include "compound.h"
#include "parser.hpp"
#include <stdlib.h>

#define yyerror eqLoader_error
#define yylineno eqLoader_lineno
#define yylex eqLoader_lex

#ifdef WIN32
#  include <io.h>
#  define isatty _isatty
#endif

void yyerror(char *);
int yylineno = 0;
#line 781 "lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 24 "loader.l"


#line 935 "lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 685 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 715 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 26 "loader.l"
{ return EQTOKEN_GLOBAL; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 27 "loader.l"
{ return EQTOKEN_CONNECTION_SATTR_HOSTNAME; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 28 "loader.l"
{ return EQTOKEN_CONNECTION_SATTR_LAUNCH_COMMAND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 29 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_TYPE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 30 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_TCPIP_PORT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 31 "loader.l"
{ return EQTOKEN_CONNECTION_IATTR_LAUNCH_TIMEOUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 32 "loader.l"
{ return EQTOKEN_CONFIG_FATTR_EYE_BASE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 33 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_STEREO; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 34 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_DOUBLEBUFFER; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 35 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_FULLSCREEN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 36 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_HINT_DECORATION;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 37 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_COLOR; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 38 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_ALPHA; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 39 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_DEPTH; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 40 "loader.l"
{ return EQTOKEN_WINDOW_IATTR_PLANES_STENCIL; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 41 "loader.l"
{ return EQTOKEN_CHANNEL_IATTR_HINT_STATISTICS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 42 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_MODE; } 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 43 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_ANAGLYPH_LEFT_MASK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 44 "loader.l"
{ return EQTOKEN_COMPOUND_IATTR_STEREO_ANAGLYPH_RIGHT_MASK; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 45 "loader.l"
{ return EQTOKEN_SERVER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 46 "loader.l"
{ return EQTOKEN_CONFIG; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 47 "loader.l"
{ return EQTOKEN_APPNODE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 48 "loader.l"
{ return EQTOKEN_NODE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 49 "loader.l"
{ return EQTOKEN_PIPE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 50 "loader.l"
{ return EQTOKEN_WINDOW; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 51 "loader.l"
{ return EQTOKEN_ATTRIBUTES; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 52 "loader.l"
{ return EQTOKEN_HINT_STEREO; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 53 "loader.l"
{ return EQTOKEN_HINT_DOUBLEBUFFER; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 54 "loader.l"
{ return EQTOKEN_HINT_FULLSCREEN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 55 "loader.l"
{ return EQTOKEN_HINT_DECORATION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 56 "loader.l"
{ return EQTOKEN_HINT_STATISTICS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 57 "loader.l"
{ return EQTOKEN_PLANES_COLOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 58 "loader.l"
{ return EQTOKEN_PLANES_ALPHA; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 59 "loader.l"
{ return EQTOKEN_PLANES_DEPTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 60 "loader.l"
{ return EQTOKEN_PLANES_STENCIL; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 61 "loader.l"
{ return EQTOKEN_ON; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 62 "loader.l"
{ return EQTOKEN_OFF; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 63 "loader.l"
{ return EQTOKEN_AUTO; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 64 "loader.l"
{ return EQTOKEN_FASTEST; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 65 "loader.l"
{ return EQTOKEN_NICEST; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 66 "loader.l"
{ return EQTOKEN_QUAD; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 67 "loader.l"
{ return EQTOKEN_ANAGLYPH; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 68 "loader.l"
{ return EQTOKEN_RED; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 69 "loader.l"
{ return EQTOKEN_GREEN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 70 "loader.l"
{ return EQTOKEN_BLUE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 71 "loader.l"
{ return EQTOKEN_CHANNEL; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 72 "loader.l"
{ return EQTOKEN_COMPOUND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 73 "loader.l"
{ return EQTOKEN_CONNECTION; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 74 "loader.l"
{ return EQTOKEN_NAME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 75 "loader.l"
{ return EQTOKEN_TYPE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 76 "loader.l"
{ return EQTOKEN_TCPIP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 77 "loader.l"
{ return EQTOKEN_HOSTNAME; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 78 "loader.l"
{ return EQTOKEN_COMMAND; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 79 "loader.l"
{ return EQTOKEN_TIMEOUT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 80 "loader.l"
{ return EQTOKEN_TASK; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 81 "loader.l"
{ return EQTOKEN_EYE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 82 "loader.l"
{ return EQTOKEN_EYE_BASE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 83 "loader.l"
{ return EQTOKEN_BUFFER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 84 "loader.l"
{ return EQTOKEN_CLEAR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 85 "loader.l"
{ return EQTOKEN_DRAW; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 86 "loader.l"
{ return EQTOKEN_CYCLOP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 87 "loader.l"
{ return EQTOKEN_LEFT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 88 "loader.l"
{ return EQTOKEN_RIGHT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 89 "loader.l"
{ return EQTOKEN_ASSEMBLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 90 "loader.l"
{ return EQTOKEN_READBACK; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 91 "loader.l"
{ return EQTOKEN_COLOR; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 92 "loader.l"
{ return EQTOKEN_DEPTH; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 93 "loader.l"
{ return EQTOKEN_VIEWPORT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 94 "loader.l"
{ return EQTOKEN_RANGE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 95 "loader.l"
{ return EQTOKEN_DISPLAY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 96 "loader.l"
{ return EQTOKEN_SCREEN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 97 "loader.l"
{ return EQTOKEN_WALL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 98 "loader.l"
{ return EQTOKEN_BOTTOM_LEFT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 99 "loader.l"
{ return EQTOKEN_BOTTOM_RIGHT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 100 "loader.l"
{ return EQTOKEN_TOP_LEFT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 101 "loader.l"
{ return EQTOKEN_LATENCY; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 102 "loader.l"
{ return EQTOKEN_SWAPBARRIER; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 103 "loader.l"
{ return EQTOKEN_OUTPUTFRAME; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 104 "loader.l"
{ return EQTOKEN_INPUTFRAME; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 105 "loader.l"
{ return EQTOKEN_STEREO_MODE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 106 "loader.l"
{ return EQTOKEN_STEREO_ANAGLYPH_LEFT_MASK; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 107 "loader.l"
{ return EQTOKEN_STEREO_ANAGLYPH_RIGHT_MASK; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 108 "loader.l"
{ return EQTOKEN_FLOAT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 109 "loader.l"
{ return EQTOKEN_FLOAT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 110 "loader.l"
{ return EQTOKEN_UNSIGNED; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 111 "loader.l"
{ return EQTOKEN_INTEGER; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 112 "loader.l"
{ return EQTOKEN_STRING; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "loader.l"
{ return *yytext; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "loader.l"
{ ++yylineno; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "loader.l"
{ ; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "loader.l"
{ while( yyinput() != '\n' ); ++yylineno; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 119 "loader.l"
ECHO;
	YY_BREAK
#line 1478 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 685 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 685 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 684);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 119 "loader.l"

