/* Copyright (c) 2006, Stefan Eilemann <eile@equalizergraphics.com> 
   All rights reserved. */

#ifndef EQ_CONFIGEVENT_H
#define EQ_CONFIGEVENT_H

#include <eq/client/event.h>
#include <eq/client/packets.h>

namespace eq
{
    /** 
     * A config event.
     *
     * Config events are generated by the event processing functions on the
     * render nodes and send to the config thread, i.e., to the application
     * using Config::sendEvent(). The config processes events at the end of the
     * frame, either non-blocking or blocking (event-driven). Config events are
     * typically application-specific. The events defined below are for the
     * default implementation, which sends the window system events more or less
     * unprocessed to the application.
     *
     * When subclassing, make sure to set the packet size.
     */
    struct EQ_EXPORT ConfigEvent : public ConfigPacket
    {
    public:
        enum Type
        {
            POINTER_MOTION,
            POINTER_BUTTON_PRESS,
            POINTER_BUTTON_RELEASE,
            KEY_PRESS,
            KEY_RELEASE,
            WINDOW_CLOSE,
            USER         = 0x100
        };

        ConfigEvent()
            {
                command = CMD_CONFIG_EVENT;
                size    = sizeof( ConfigEvent );
            }

        uint32_t type;

        union // event data: Move into subclass?
        {
            ResizeEvent  resize;

            PointerEvent pointerMotion;
            PointerEvent pointerButtonPress;
            PointerEvent pointerButtonRelease;

            KeyEvent     keyPress;
            KeyEvent     keyRelease;

            UserEvent    user;
        };
    };

    EQ_EXPORT std::ostream& operator << ( std::ostream& os, const ConfigEvent* event );
}

#endif // EQ_CONFIGEVENT_H

