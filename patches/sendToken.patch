Index: lib/net/packets.h
===================================================================
--- lib/net/packets.h	(revision 2530)
+++ lib/net/packets.h	(working copy)
@@ -197,6 +197,41 @@
         EQ_ALIGN8( char nodeData[8] );
     };
 
+    struct NodeAcquireSendTokenPacket : public NodePacket
+    {
+        NodeAcquireSendTokenPacket()
+            {
+                command = CMD_NODE_ACQUIRE_SEND_TOKEN;
+                size    = sizeof( NodeAcquireSendTokenPacket );
+            }
+
+        uint32_t requestID;
+    };
+
+    struct NodeAcquireSendTokenReplyPacket : public NodePacket
+    {
+        NodeAcquireSendTokenReplyPacket(
+            const NodeAcquireSendTokenPacket* request )
+
+            {
+                command = CMD_NODE_ACQUIRE_SEND_TOKEN_REPLY;
+                size    = sizeof( NodeAcquireSendTokenReplyPacket );
+                requestID = request->requestID;
+            }
+
+        uint32_t requestID;
+    };
+
+    struct NodeReleaseSendTokenPacket : public NodePacket
+    {
+        NodeReleaseSendTokenPacket()
+            {
+                command = CMD_NODE_RELEASE_SEND_TOKEN;
+                size    = sizeof( NodeReleaseSendTokenPacket );
+            }
+    };
+
+
     //------------------------------------------------------------
     // Session
     //------------------------------------------------------------
Index: lib/net/commands.h
===================================================================
--- lib/net/commands.h	(revision 2530)
+++ lib/net/commands.h	(working copy)
@@ -25,6 +25,9 @@
         CMD_NODE_DISCONNECT,
         CMD_NODE_GET_NODE_DATA,
         CMD_NODE_GET_NODE_DATA_REPLY,
+        CMD_NODE_ACQUIRE_SEND_TOKEN,
+        CMD_NODE_ACQUIRE_SEND_TOKEN_REPLY,
+        CMD_NODE_RELEASE_SEND_TOKEN,
         CMD_NODE_CUSTOM // must be last
     };
 
Index: lib/net/node.cpp
===================================================================
--- lib/net/node.cpp	(revision 2530)
+++ lib/net/node.cpp	(working copy)
@@ -44,6 +44,7 @@
         , _launchID( EQ_ID_INVALID )
         , _programName( Global::getProgramName( ))
         , _workDir( Global::getWorkDir( ))
+        , _hasSendToken( true )
 {
     _receiverThread = new ReceiverThread( this );
     _commandThread  = new CommandThread( this );
@@ -75,6 +76,15 @@
     registerCommand( CMD_NODE_GET_NODE_DATA_REPLY,
                      CommandFunc<Node>( this, &Node::_cmdGetNodeDataReply ),
                      &_commandThreadQueue );
+    registerCommand( CMD_NODE_ACQUIRE_SEND_TOKEN,
+                     CommandFunc<Node>( this, &Node::_cmdAcquireSendToken ), 
+                     &_commandThreadQueue );
+    registerCommand( CMD_NODE_ACQUIRE_SEND_TOKEN_REPLY,
+                     CommandFunc<Node>( this, &Node::_cmdAcquireSendTokenReply )
+                     , &_commandThreadQueue );
+    registerCommand( CMD_NODE_RELEASE_SEND_TOKEN,
+                     CommandFunc<Node>( this, &Node::_cmdReleaseSendToken ),
+                     & _commandThreadQueue );
 
     EQINFO << "New Node @" << (void*)this << " " << _id << endl;
 }
@@ -568,6 +578,20 @@
     return true;
 }
 
+void Node::acquireSendToken( NodePtr node )
+{
+    NodeAcquireSendTokenPacket packet;
+    packet.requestID = _requestHandler.registerRequest();
+    node->send( packet );
+    _requestHandler.waitRequest( packet.requestID );
+}
+
+void Node::releaseSendToken( NodePtr node )
+{
+    NodeReleaseSendTokenPacket packet;
+    node->send( packet );
+}
+
 //----------------------------------------------------------------------
 // receiver thread functions
 //----------------------------------------------------------------------
@@ -1275,6 +1299,49 @@
     return COMMAND_HANDLED;
 }
 
+CommandResult Node::_cmdAcquireSendToken( Command& command )
+{
+    NodeAcquireSendTokenPacket* packet = 
+        command.getPacket<NodeAcquireSendTokenPacket>();
+
+    NodeAcquireSendTokenReplyPacket reply( packet );
+
+    if( _hasSendToken )
+    {
+        _hasSendToken = false;
+        command.getNode()->send( reply );
+    }
+    else
+        _sendWaiting.push_back( SendWaiting( command.getNode(), reply ));
+
+    return COMMAND_HANDLED;
+}
+
+CommandResult Node::_cmdAcquireSendTokenReply( Command& command )
+{
+    NodeAcquireSendTokenReplyPacket* packet = 
+        command.getPacket<NodeAcquireSendTokenReplyPacket>();
+
+    _requestHandler.serveRequest( packet->requestID );
+    return COMMAND_HANDLED;
+}
+
+CommandResult Node::_cmdReleaseSendToken( Command& command )
+{
+    EQASSERT( !_hasSendToken );
+
+    if( _sendWaiting.empty( ))
+        _hasSendToken = true;
+    else
+    {
+        SendWaiting& waiting = _sendWaiting.back();
+        waiting.first->send( waiting.second );
+        _sendWaiting.pop_back();
+    }
+
+    return COMMAND_HANDLED;
+}
+
 //----------------------------------------------------------------------
 // utility functions
 //----------------------------------------------------------------------
Index: lib/net/node.h
===================================================================
--- lib/net/node.h	(revision 2530)
+++ lib/net/node.h	(working copy)
@@ -370,6 +370,9 @@
          * which are normally only redispatched when a new command is received.
          */
         void flushCommands() { _connectionSet.interrupt(); }
+
+        void acquireSendToken( NodePtr toNode );
+        void releaseSendToken( NodePtr toNode );
         //@}
 
         /**
@@ -588,6 +591,13 @@
         };
         CommandThread* _commandThread;
 
+        /** true if the send token can be granted, false otherwise. */
+        bool _hasSendToken;
+
+        typedef std::pair< net::NodePtr, NodeAcquireSendTokenReplyPacket >
+            SendWaiting;
+        std::vector< SendWaiting > _sendWaiting;
+
         bool _listenToSelf();
         void _cleanup();
 
@@ -657,6 +667,9 @@
         CommandResult _cmdDisconnect( Command& command );
         CommandResult _cmdGetNodeData( Command& command );
         CommandResult _cmdGetNodeDataReply( Command& command );
+        CommandResult _cmdAcquireSendToken( Command& command );
+        CommandResult _cmdAcquireSendTokenReply( Command& command );
+        CommandResult _cmdReleaseSendToken( Command& command );
 
         CHECK_THREAD_DECLARE( _thread );
     };
Index: lib/client/frameData.cpp
===================================================================
--- lib/client/frameData.cpp	(revision 2530)
+++ lib/client/frameData.cpp	(working copy)
@@ -275,7 +275,7 @@
             continue;
         
         // send image pixel data packet
-
+        getLocalNode()->acquireSendToken( toNode );
         connection->lockSend();
         connection->send( &packet, packetSize, true );
 #ifndef NDEBUG
@@ -308,6 +308,7 @@
 #endif
 
         connection->unlockSend();
+        getLocalNode()->releaseSendToken( toNode );
     }
 
     FrameDataReadyPacket readyPacket;
