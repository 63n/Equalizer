# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})
# Copyright (c) 2014 Stefan.Eilemann@epfl.ch

# Provides common_package(Name args) which improves find_package.
# First invokes find_package with all the given arguments, and then
# falls back to using pkg_config if available. The pkg_config path
# does only implement the version, REQUIRED and QUIET find_package
# arguments (e.g. no COMPONENTS)

find_package(PkgConfig)
set(ENV{PKG_CONFIG_PATH}
  "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")

macro(COMMON_PACKAGE Name)
  string(TOUPPER ${Name} COMMON_PACKAGE_NAME)
  set(COMMON_PACKAGE_ARGS ${ARGN}) # ARGN is not a list. make one.
  set(COMMON_PACKAGE_VERSION)

  if(COMMON_PACKAGE_ARGS)
    list(GET COMMON_PACKAGE_ARGS 0 COMMON_PACKAGE_VERSION)
    if(COMMON_PACKAGE_VERSION MATCHES "^[0-9.]+$") # is a version
      set(COMMON_PACKAGE_VERSION ">=${COMMON_PACKAGE_VERSION}")
    else()
      set(COMMON_PACKAGE_VERSION)
    endif()
  endif()

  list(FIND COMMON_PACKAGE_ARGS "QUIET" COMMON_PACKAGE_QUIET_POS)
  if(COMMON_PACKAGE_QUIET_POS EQUAL -1)
    set(COMMON_PACKAGE_QUIET)
  else()
    set(COMMON_PACKAGE_QUIET "QUIET")
  endif()

  list(FIND COMMON_PACKAGE_ARGS "REQUIRED" COMMON_PACKAGE_REQUIRED_POS)
  if(COMMON_PACKAGE_REQUIRED_POS EQUAL -1) # Optional find
    find_package(${Name} ${COMMON_PACKAGE_ARGS}) # try standard cmake way
    if((NOT ${Name}_FOUND) AND (NOT ${COMMON_PACKAGE_NAME}_FOUND) AND PKG_CONFIG_EXECUTABLE)
      pkg_check_modules(${Name} ${Name}${COMMON_PACKAGE_VERSION}
        ${COMMON_PACKAGE_QUIET}) # try pkg_config way
    endif()
  else() # required find
    list(REMOVE_AT COMMON_PACKAGE_ARGS ${COMMON_PACKAGE_REQUIRED_POS})
    find_package(${Name} ${COMMON_PACKAGE_ARGS}) # try standard cmake way
    if((NOT ${Name}_FOUND) AND (NOT ${COMMON_PACKAGE_NAME}_FOUND) AND PKG_CONFIG_EXECUTABLE)
      pkg_check_modules(${Name} REQUIRED ${Name}${COMMON_PACKAGE_VERSION}
        ${COMMON_PACKAGE_QUIET}) # try pkg_config way (and fail if needed)
    endif()
  endif()
endmacro()

common_package(vmmlib 1.8  REQUIRED )
common_package(Lunchbox 1.10  REQUIRED )
common_package(Collage 1.1  REQUIRED )
common_package(OpenGL   REQUIRED )
common_package(Boost 1.41.0  REQUIRED COMPONENTS program_options filesystem system thread)
common_package(Pression 1.0  REQUIRED )
common_package(X11    )
common_package(hwsd 1.1   )
common_package(GLStats 0.3   )
common_package(hwloc 1.3   )
common_package(OpenSceneGraph 3.0   COMPONENTS osgDB osgUtil)
common_package(OpenCV 2.0   )
common_package(VRPN 07.30   )
common_package(Deflect 0.4   )
common_package(MAGELLAN    )
common_package(GLEW_MX    )
common_package(Qt4 4.6   COMPONENTS QtCore QtGui QtOpenGL)

if(EXISTS ${PROJECT_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
  include(${PROJECT_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
endif()

if(VMMLIB_FOUND)
  set(vmmlib_name VMMLIB)
  set(vmmlib_FOUND TRUE)
elseif(vmmlib_FOUND)
  set(vmmlib_name vmmlib)
  set(VMMLIB_FOUND TRUE)
endif()
if(vmmlib_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_VMMLIB)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES vmmlib)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} vmmlib")
  link_directories(${${vmmlib_name}_LIBRARY_DIRS})
  if(NOT "${${vmmlib_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${vmmlib_name}_INCLUDE_DIRS})
  endif()
endif()

if(LUNCHBOX_FOUND)
  set(Lunchbox_name LUNCHBOX)
  set(Lunchbox_FOUND TRUE)
elseif(Lunchbox_FOUND)
  set(Lunchbox_name Lunchbox)
  set(LUNCHBOX_FOUND TRUE)
endif()
if(Lunchbox_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_LUNCHBOX)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Lunchbox)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Lunchbox")
  link_directories(${${Lunchbox_name}_LIBRARY_DIRS})
  if(NOT "${${Lunchbox_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Lunchbox_name}_INCLUDE_DIRS})
  endif()
endif()

if(COLLAGE_FOUND)
  set(Collage_name COLLAGE)
  set(Collage_FOUND TRUE)
elseif(Collage_FOUND)
  set(Collage_name Collage)
  set(COLLAGE_FOUND TRUE)
endif()
if(Collage_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_COLLAGE)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Collage)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Collage")
  link_directories(${${Collage_name}_LIBRARY_DIRS})
  if(NOT "${${Collage_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Collage_name}_INCLUDE_DIRS})
  endif()
endif()

if(OPENGL_FOUND)
  set(OpenGL_name OPENGL)
  set(OpenGL_FOUND TRUE)
elseif(OpenGL_FOUND)
  set(OpenGL_name OpenGL)
  set(OPENGL_FOUND TRUE)
endif()
if(OpenGL_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_OPENGL)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES OpenGL)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenGL")
  link_directories(${${OpenGL_name}_LIBRARY_DIRS})
  if(NOT "${${OpenGL_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenGL_name}_INCLUDE_DIRS})
  endif()
endif()

if(BOOST_FOUND)
  set(Boost_name BOOST)
  set(Boost_FOUND TRUE)
elseif(Boost_FOUND)
  set(Boost_name Boost)
  set(BOOST_FOUND TRUE)
endif()
if(Boost_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_BOOST)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Boost)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Boost")
  link_directories(${${Boost_name}_LIBRARY_DIRS})
  if(NOT "${${Boost_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIRS})
  endif()
endif()

if(PRESSION_FOUND)
  set(Pression_name PRESSION)
  set(Pression_FOUND TRUE)
elseif(Pression_FOUND)
  set(Pression_name Pression)
  set(PRESSION_FOUND TRUE)
endif()
if(Pression_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_PRESSION)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Pression)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Pression")
  link_directories(${${Pression_name}_LIBRARY_DIRS})
  if(NOT "${${Pression_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Pression_name}_INCLUDE_DIRS})
  endif()
endif()

if(X11_FOUND)
  set(X11_name X11)
  set(X11_FOUND TRUE)
elseif(X11_FOUND)
  set(X11_name X11)
  set(X11_FOUND TRUE)
endif()
if(X11_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_X11)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES X11)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} X11")
  link_directories(${${X11_name}_LIBRARY_DIRS})
  if(NOT "${${X11_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${X11_name}_INCLUDE_DIRS})
  endif()
endif()

if(HWSD_FOUND)
  set(hwsd_name HWSD)
  set(hwsd_FOUND TRUE)
elseif(hwsd_FOUND)
  set(hwsd_name hwsd)
  set(HWSD_FOUND TRUE)
endif()
if(hwsd_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_HWSD)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES hwsd)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} hwsd")
  link_directories(${${hwsd_name}_LIBRARY_DIRS})
  if(NOT "${${hwsd_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${hwsd_name}_INCLUDE_DIRS})
  endif()
endif()

if(GLSTATS_FOUND)
  set(GLStats_name GLSTATS)
  set(GLStats_FOUND TRUE)
elseif(GLStats_FOUND)
  set(GLStats_name GLStats)
  set(GLSTATS_FOUND TRUE)
endif()
if(GLStats_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_GLSTATS)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES GLStats)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} GLStats")
  link_directories(${${GLStats_name}_LIBRARY_DIRS})
  if(NOT "${${GLStats_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${GLStats_name}_INCLUDE_DIRS})
  endif()
endif()

if(HWLOC_FOUND)
  set(hwloc_name HWLOC)
  set(hwloc_FOUND TRUE)
elseif(hwloc_FOUND)
  set(hwloc_name hwloc)
  set(HWLOC_FOUND TRUE)
endif()
if(hwloc_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_HWLOC)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES hwloc)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} hwloc")
  link_directories(${${hwloc_name}_LIBRARY_DIRS})
  if(NOT "${${hwloc_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${hwloc_name}_INCLUDE_DIRS})
  endif()
endif()

if(OPENSCENEGRAPH_FOUND)
  set(OpenSceneGraph_name OPENSCENEGRAPH)
  set(OpenSceneGraph_FOUND TRUE)
elseif(OpenSceneGraph_FOUND)
  set(OpenSceneGraph_name OpenSceneGraph)
  set(OPENSCENEGRAPH_FOUND TRUE)
endif()
if(OpenSceneGraph_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_OPENSCENEGRAPH)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES OpenSceneGraph)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenSceneGraph")
  link_directories(${${OpenSceneGraph_name}_LIBRARY_DIRS})
  if(NOT "${${OpenSceneGraph_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(BEFORE SYSTEM ${${OpenSceneGraph_name}_INCLUDE_DIRS})
  endif()
endif()

if(OPENCV_FOUND)
  set(OpenCV_name OPENCV)
  set(OpenCV_FOUND TRUE)
elseif(OpenCV_FOUND)
  set(OpenCV_name OpenCV)
  set(OPENCV_FOUND TRUE)
endif()
if(OpenCV_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_OPENCV)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES OpenCV)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenCV")
  link_directories(${${OpenCV_name}_LIBRARY_DIRS})
  if(NOT "${${OpenCV_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${OpenCV_name}_INCLUDE_DIRS})
  endif()
endif()

if(VRPN_FOUND)
  set(VRPN_name VRPN)
  set(VRPN_FOUND TRUE)
elseif(VRPN_FOUND)
  set(VRPN_name VRPN)
  set(VRPN_FOUND TRUE)
endif()
if(VRPN_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_VRPN)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES VRPN)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} VRPN")
  link_directories(${${VRPN_name}_LIBRARY_DIRS})
  if(NOT "${${VRPN_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${VRPN_name}_INCLUDE_DIRS})
  endif()
endif()

if(DEFLECT_FOUND)
  set(Deflect_name DEFLECT)
  set(Deflect_FOUND TRUE)
elseif(Deflect_FOUND)
  set(Deflect_name Deflect)
  set(DEFLECT_FOUND TRUE)
endif()
if(Deflect_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_DEFLECT)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Deflect)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Deflect")
  link_directories(${${Deflect_name}_LIBRARY_DIRS})
  if(NOT "${${Deflect_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Deflect_name}_INCLUDE_DIRS})
  endif()
endif()

if(MAGELLAN_FOUND)
  set(MAGELLAN_name MAGELLAN)
  set(MAGELLAN_FOUND TRUE)
elseif(MAGELLAN_FOUND)
  set(MAGELLAN_name MAGELLAN)
  set(MAGELLAN_FOUND TRUE)
endif()
if(MAGELLAN_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_MAGELLAN)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES MAGELLAN)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} MAGELLAN")
  link_directories(${${MAGELLAN_name}_LIBRARY_DIRS})
  if(NOT "${${MAGELLAN_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${MAGELLAN_name}_INCLUDE_DIRS})
  endif()
endif()

if(GLEW_MX_FOUND)
  set(GLEW_MX_name GLEW_MX)
  set(GLEW_MX_FOUND TRUE)
elseif(GLEW_MX_FOUND)
  set(GLEW_MX_name GLEW_MX)
  set(GLEW_MX_FOUND TRUE)
endif()
if(GLEW_MX_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_GLEW_MX)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES GLEW_MX)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} GLEW_MX")
  link_directories(${${GLEW_MX_name}_LIBRARY_DIRS})
  if(NOT "${${GLEW_MX_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${GLEW_MX_name}_INCLUDE_DIRS})
  endif()
endif()

if(QT4_FOUND)
  set(Qt4_name QT4)
  set(Qt4_FOUND TRUE)
elseif(Qt4_FOUND)
  set(Qt4_name Qt4)
  set(QT4_FOUND TRUE)
endif()
if(Qt4_name)
  list(APPEND FIND_PACKAGES_DEFINES EQUALIZER_USE_QT4)
  if(NOT COMMON_LIBRARY_TYPE MATCHES "SHARED")
    list(APPEND EQUALIZER_DEPENDENT_LIBRARIES Qt4)
  endif()
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt4")
  link_directories(${${Qt4_name}_LIBRARY_DIRS})
  if(NOT "${${Qt4_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Qt4_name}_INCLUDE_DIRS})
  endif()
endif()

set(EQUALIZER_BUILD_DEBS autoconf;automake;avahi-daemon;bison;cmake;doxygen;flex;freeglut3-dev;git;git-review;libavahi-client-dev;libboost-date-time-dev;libboost-filesystem-dev;libboost-program-options-dev;libboost-regex-dev;libboost-serialization-dev;libboost-system-dev;libboost-test-dev;libboost-thread-dev;libgl1-mesa-dev;libglewmx1.6-dev;libhwloc-dev;libibverbs-dev;libjpeg-turbo8-dev;libleveldb-dev;libopencv-dev;libopenmpi-dev;libopenscenegraph-dev;libqt4-dev;librdmacm-dev;libspnav-dev;libturbojpeg;libudt-dev;libx11-dev;openmpi-bin;pkg-config;subversion)

set(EQUALIZER_DEPENDS vmmlib;Lunchbox;Collage;OpenGL;Boost;Pression;X11;hwsd;GLStats;hwloc;OpenSceneGraph;OpenCV;VRPN;Deflect;MAGELLAN;GLEW_MX;Qt4)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  message(WARNING "PROJECT_INCLUDE_NAME not set, old or missing Common.cmake?")
  set(PROJECT_INCLUDE_NAME ${PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_CURRENT_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
list(APPEND COMMON_INCLUDES ${DEFINES_FILE})
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
if(CMAKE_MODULE_INSTALL_PATH)
  install(FILES ${OPTIONS_CMAKE} DESTINATION ${CMAKE_MODULE_INSTALL_PATH}
    COMPONENT dev)
else()
  message(WARNING "CMAKE_MODULE_INSTALL_PATH not set, old or missing Common.cmake?")
endif()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
configure_file(${DEFINES_FILE_IN} ${DEFINES_FILE} COPYONLY)
if(Boost_FOUND) # another WAR for broken boost stuff...
  set(Boost_VERSION ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})
endif()
if(CUDA_FOUND)
  string(REPLACE "-std=c++11" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
  string(REPLACE "-std=c++0x" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
endif()
if(OPENMP_FOUND)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(QT4_FOUND)
  if(WIN32)
    set(QT_USE_QTMAIN TRUE)
  endif()
  # Configure a copy of the 'UseQt4.cmake' system file.
  if(NOT EXISTS ${QT_USE_FILE})
    message(WARNING "Can't find QT_USE_FILE!")
  else()
    set(_customUseQt4File "${CMAKE_CURRENT_BINARY_DIR}/UseQt4.cmake")
    file(READ ${QT_USE_FILE} content)
    # Change all include_directories() to use the SYSTEM option
    string(REPLACE "include_directories(" "include_directories(SYSTEM " content ${content})
    string(REPLACE "INCLUDE_DIRECTORIES(" "INCLUDE_DIRECTORIES(SYSTEM " content ${content})
    file(WRITE ${_customUseQt4File} ${content})
    set(QT_USE_FILE ${_customUseQt4File})
    include(${QT_USE_FILE})
  endif()
endif()
if(FIND_PACKAGES_FOUND)
  if(MSVC)
    message(STATUS "Configured ${PROJECT_NAME} with ${FIND_PACKAGES_FOUND}")
  else()
    message(STATUS "Configured ${PROJECT_NAME} with ${CMAKE_BUILD_TYPE}${FIND_PACKAGES_FOUND}")
  endif()
endif()
