//Generated file - Edit fragmentShader.glsl!
#include <string>
static const std::string fragmentShader_glsl = "\n /* Copyright (c) 2007       Maxim Makhinya\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *\n  * - Redistributions of source code must retain the above copyright notice, this\n  *   list of conditions and the following disclaimer.\n  * - Redistributions in binary form must reproduce the above copyright notice,\n  *   this list of conditions and the following disclaimer in the documentation\n  *   and/or other materials provided with the distribution.\n  * - Neither the name of Eyescale Software GmbH nor the names of its\n  *   contributors may be used to endorse or promote products derived from this\n  *   software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n \n \n // input variables to function\n \n uniform sampler3D volume; //gx, gy, gz, v\n uniform sampler2D preInt; // r,  g,  b, a\n \n uniform float shininess;\n uniform vec3  viewVec;\n \n void main (void)\n {\n     vec4 lookupSF;\n     vec4 lookupSB;\n \n     lookupSF = texture3D(volume, gl_TexCoord[0].xyz);\n     lookupSB = texture3D(volume, gl_TexCoord[1].xyz);\n \n     vec4 preInt_ =  texture2D(preInt, vec2(lookupSF.a, lookupSB.a));\n \n     // lighting\n     vec3 normalSF = lookupSF.rgb-0.5;\n     vec3 normalSB = lookupSB.rgb-0.5;\n     vec3 tnorm   = -normalize(normalSF+normalSB);\n \n     vec3 lightVec = normalize( gl_LightSource[0].position.xyz );\n     vec3 reflect  = reflect( -lightVec, tnorm );\n \n     float diffuse = max( dot(lightVec, tnorm), 0.0 );\n \n     float specular = pow(max(dot(reflect, viewVec), 0.0), shininess);\n \n     vec4 color = vec4(gl_LightSource[0].ambient.rgb  * preInt_.rgb +\n                       gl_LightSource[0].diffuse.rgb  * preInt_.rgb * diffuse +\n                       gl_LightSource[0].specular.rgb * preInt_.rgb * specular,\n                       preInt_.a);\n \n     gl_FragColor = color;\n }\n \n ";
