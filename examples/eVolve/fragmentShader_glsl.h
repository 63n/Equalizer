//Generated file - Edit fragmentShader.glsl!
static const std::string fragmentShader_glsl = "/* Copyright (c) 2007       Maxim Makhinya\n    All rights reserved. */\n \n \n // input variables to function\n \n uniform sampler3D volume; //gx, gy, gz, v\n uniform sampler2D preInt; // r,  g,  b, a\n \n uniform float shininess;\n \n varying vec3 ecPosition;\n \n void main (void)\n {\n     vec4 lookupSF;\n     vec4 lookupSB;\n \n     lookupSF = texture3D(volume, gl_TexCoord[0].xyz);\n     lookupSB = texture3D(volume, gl_TexCoord[1].xyz);\n \n     vec4 preInt_ =  texture2D(preInt, vec2(lookupSF.a, lookupSB.a));\n \n     // lighting\n     vec3 normalSF = lookupSF.rgb-0.5;\n     vec3 normalSB = lookupSB.rgb-0.5;\n     vec3 normal   = -normalize(normalSF+normalSB);\n \n     vec3 tnorm    = normalize( gl_NormalMatrix * normal );\n     vec3 lightVec = normalize( gl_LightSource[0].position.xyz - ecPosition);\n     vec3 reflect  = reflect( -lightVec, tnorm );\n     vec3 viewVec  = normalize( -ecPosition );\n \n     float diffuse = max( dot(lightVec, tnorm), 0.0 );\n \n     float specular = pow(max(dot(reflect, viewVec), 0.0), shininess);\n \n     vec4 color = vec4(gl_LightSource[0].ambient.rgb  * preInt_.rgb +\n                       gl_LightSource[0].diffuse.rgb  * preInt_.rgb * diffuse +\n                       gl_LightSource[0].specular.rgb * preInt_.rgb * specular,\n                       preInt_.a);\n \n     gl_FragColor = color;\n }\n \n ";
