static const std::string fragmentShader_glsl = "/* Copyright (c) 2007       Maxim Makhinya\n    All rights reserved. */\n \n \n // input variables to function\n \n uniform sampler3D volume; //gx, gy, gz, v\n uniform sampler2D preInt; // r,  g,  b, a\n \n uniform float shininess;\n \n \n void main (void)\n {\n     \n     vec4 lookupSF;\n     vec4 lookupSB;\n     \n     lookupSF = texture3D(volume, gl_TexCoord[0].xyz);\n     lookupSB = texture3D(volume, gl_TexCoord[1].xyz);\n \n     vec4 preInt_ =  texture2D(preInt, vec2(lookupSF.a, lookupSB.a));\n \n \n     // lighting\n     vec3 normalSF = (2.*lookupSF.rgb-1.);\n     vec3 normalSB = (2.*lookupSB.rgb-1.);\n     vec3 normal = normalize(normalSF+normalSB);\n \n     vec3 L = (gl_LightSource[0].position).xyz;\n \n     vec3 halfVector = normalize(L);\n \n \n     float diffuse = max(dot(gl_LightSource[0].position.xyz, normal), 0.0); \n \n     float specular = pow(max(dot(halfVector, normal), 0.0), shininess); \n \n     vec4 color = vec4(gl_LightSource[0].ambient.rgb  * preInt_.rgb + \n                       gl_LightSource[0].diffuse.rgb  * preInt_.rgb * diffuse + \n                       gl_LightSource[0].specular.rgb * preInt_.rgb * specular ,\n                       preInt_.a);\n \n     gl_FragColor = color;\n \n }\n \n ";
