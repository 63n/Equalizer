static const std::string vertexShader_glsl = "\n /*\n // updated per cube\n varying vec3  vecTranslate;\n \n // updated per frame\n uniform vec3  vecView;\n uniform int   frontIndex;\n \n // const: never updated\n uniform float dPlaneStart;\n uniform float dPlaneIncr;\n uniform int   sequence[64];\n uniform vec3  vecVertices[8];\n uniform int   v1[24];\n uniform int   v2[24];\n \n void main(void)\n {\n     float dPlaneDist = dPlaneStart + gl_Vertex.y * dPlaneIncr;\n         \n     vec3 Position  = vecTranslate;\n     \n     for( int e = 0; e < 4; e++ )\n     {\n     \n         int vidx1 = sequence[ int( frontIndex * 8 + v1[ int( gl_Vertex.x ) * 4 + e ] ) ];\n         int vidx2 = sequence[ int( frontIndex * 8 + v2[ int( gl_Vertex.x ) * 4 + e ] ) ];\n     \n         vec3 vecV1 = vecVertices[ vidx1 ];\n         vec3 vecV2 = vecVertices[ vidx2 ];\n         \n         vec3 vecStart = vecV1 + vecTranslate;\n         vec3 vecDir   = vecV2 - vecV1;\n     \n         float denom = dot( vecDir, vecView );\n         float lambda = ( denom != 0.0 ) ? ( dPlaneDist - dot( vecStart, vecView ) ) / denom : -1.0;\n \n         if( (lambda >= 0.0) && (lambda <= 1.0) )\n         {\n             Position = vecStart + lambda * vecDir;\n             break;\n         }\n         \n     } \n     \n     gl_Position = gl_ModelViewProjectionMatrix * vec4( Position, 1.0 );\n }\n */\n \n uniform float sliceDistance;\n \n void main(void)\n {\n     gl_ClipVertex = gl_ModelViewMatrix * gl_Vertex;\n     \n     gl_Position = ftransform();\n     \n     gl_TexCoord[0] = gl_TextureMatrixInverse[0] * gl_Vertex;\n     gl_TexCoord[0] = gl_TexCoord[0] / 2.0 + 0.5;\n     \n     vec4 vPosition = gl_ModelViewMatrixInverse*vec4(0,0,0,1);\n     vec4 vDir = normalize(gl_ModelViewMatrixInverse * vec4(0.,0.,-1.,1.));\n \n     //compute position of virtual back vertex\n     \n     vec4 eyeToVert = normalize(gl_Vertex - vPosition);\n     vec4 backVert = vec4(1,1,1,1);\n     backVert = gl_Vertex - eyeToVert * (sliceDistance / dot(vDir,eyeToVert)); \n     \n     //compute texture coordinates for virtual back vertex\n     \n     gl_TexCoord[1] = gl_TextureMatrixInverse[0] * backVert;\n     gl_TexCoord[1] = gl_TexCoord[1] / 2.0 + 0.5;\n }\n ";
