//Generated file - Edit vertexShader.glsl!
#include <string>
static const std::string vertexShader_glsl = "\n /* Copyright (c) 2007       Maxim Makhinya\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *\n  * - Redistributions of source code must retain the above copyright notice, this\n  *   list of conditions and the following disclaimer.\n  * - Redistributions in binary form must reproduce the above copyright notice,\n  *   this list of conditions and the following disclaimer in the documentation\n  *   and/or other materials provided with the distribution.\n  * - Neither the name of Eyescale Software GmbH nor the names of its\n  *   contributors may be used to endorse or promote products derived from this\n  *   software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n \n #version 110\n \n // updated per frame\n uniform float   sliceDistance;\n uniform float   perspProj;\n \n \n uniform float   W;   //scale for x\n uniform float   H;   //scale for y\n uniform float   D;   //scale for z\n uniform float   Do;  //shift of z\n uniform float   Db;  //z offset \n \n void main(void)\n {\n     gl_TexCoord[0] = 0.5 * gl_Vertex + 0.5;\n \n     vec4 vDir = normalize(gl_ModelViewMatrixInverse * vec4(0.,0.,-1.,1.));\n \n     //compute position of virtual back vertex\n     vec4 vPosition = gl_ModelViewMatrixInverse*vec4(0,0,0,1);\n \n     vec4 eyeToVert = normalize(gl_Vertex - vPosition);\n \n // perspective/parallel projection sellection\n     vec4 shift = eyeToVert * (sliceDistance / dot(vDir,eyeToVert)) * perspProj +\n                  vDir * sliceDistance * ( 1.0 - perspProj );\n \n     gl_TexCoord[1] = gl_Vertex + shift;\n \n     //compute texture coordinates for virtual back vertex\n     gl_TexCoord[1] = 0.5 * gl_TexCoord[1] + 0.5;\n \n \n //Scaling of texture coordinates\n     gl_TexCoord[0].x  *= W;\n     gl_TexCoord[0].y  *= H;\n     gl_TexCoord[0].z   = Db + (gl_TexCoord[0].z - Do) * D;\n \n     gl_TexCoord[1].x  *= W;\n     gl_TexCoord[1].y  *= H;\n     gl_TexCoord[1].z   = Db + (gl_TexCoord[1].z - Do) * D;\n \n     gl_Position = ftransform();\n }\n ";
