//Generated file - Edit fragmentShader.glsl!
#include <string>
static const std::string fragmentShader_glsl = "/*  \n  *  fragmentShader.glsl\n  *  Copyright (c) 2007, Tobias Wolf <twolf@access.unizh.ch>\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *\n  * - Redistributions of source code must retain the above copyright notice, this\n  *   list of conditions and the following disclaimer.\n  * - Redistributions in binary form must reproduce the above copyright notice,\n  *   this list of conditions and the following disclaimer in the documentation\n  *   and/or other materials provided with the distribution.\n  * - Neither the name of Eyescale Software GmbH nor the names of its\n  *   contributors may be used to endorse or promote products derived from this\n  *   software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */ \n     \n // Fragment shader for Phong/Blinn-Phong Shading with one light source.\n \n \n varying vec3 normalEye;\n varying vec4 positionEye;\n \n \n void main()\n {\n     // normalize interpolated normal, compute view vector from position\n     vec3 normal = normalize( normalEye );\n     vec3 view = normalize( -positionEye ).xyz;\n     \n     // compute light vector\n     vec3 light;\n     if( gl_LightSource[0].position.w == 0.0 )\n         // directional light\n         light = normalize( gl_LightSource[0].position ).xyz;\n     else\n         // point light\n         light = normalize( gl_LightSource[0].position - positionEye ).xyz;\n     \n     // compute the ambient component\n     //vec4 ambient = gl_FrontLightProduct[0].ambient;\n     vec4 ambient = gl_LightSource[0].ambient * gl_Color;\n     \n     // compute the diffuse component\n     float dotLN = dot( light, normal );\n     //vec4 diffuse = gl_FrontLightProduct[0].diffuse * max( dotLN, 0.0 );\n     vec4 diffuse = gl_LightSource[0].diffuse * gl_Color * max( dotLN, 0.0 );\n     \n     // compute the specular component\n     float factor;\n     if( dotLN > 0.0 )\n         factor = 1.0;\n     else\n         factor = 0.0;\n     \n     // pure Phong\n     //vec3 reflect = normalize( reflect( -light, normal ) );\n     //vec4 specular = \n     //    gl_FrontLightProduct[0].specular * factor *\n     //    max( pow( dot( reflect, view ), gl_FrontMaterial.shininess ), 0.0 );\n     \n     // modified Blinn-Phong\n     vec3 halfway = normalize( light + view );\n     vec4 specular = \n         gl_FrontLightProduct[0].specular * factor *\n         max( pow( dot( normal, halfway ), gl_FrontMaterial.shininess ), 0.0 );\n     \n     // sum the components up, defaulting alpha to 1.0\n     gl_FragColor = \n         vec4( vec3( gl_FrontLightModelProduct.sceneColor + \n                     ambient + diffuse + specular ), 1.0 );\n }\n ";
