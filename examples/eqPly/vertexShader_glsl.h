//Generated file - Edit vertexShader.glsl!
static const std::string vertexShader_glsl = "\n /* Copyright (c) 2007, Tobias Wolf <twolf@access.unizh.ch>\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * modification, are permitted provided that the following conditions are met:\n  *\n  * - Redistributions of source code must retain the above copyright notice, this\n  *   list of conditions and the following disclaimer.\n  * - Redistributions in binary form must reproduce the above copyright notice,\n  *   this list of conditions and the following disclaimer in the documentation\n  *   and/or other materials provided with the distribution.\n  * - Neither the name of Eyescale Software GmbH nor the names of its\n  *   contributors may be used to endorse or promote products derived from this\n  *   software without specific prior written permission.\n  *\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */ \n     \n // Vertex shader for Phong/Blinn-Phong Shading with one light source.\n \n \n varying vec3 normalEye;\n varying vec4 positionEye;\n \n \n void main()\n {\n     // transform normal to eye coordinates\n     normalEye = normalize( gl_NormalMatrix * gl_Normal );\n     \n     // transform position to eye coordinates\n     positionEye = normalize( gl_ModelViewMatrix * gl_Vertex );\n     \n     // transform position to screen coordinates\n     //gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;\n     gl_Position = ftransform();\n     \n     // pass the vertex colors on to the fragment shader\n     gl_FrontColor = gl_Color;\n }\n ";
